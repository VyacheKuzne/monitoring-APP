import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import { HttpService } from '@nestjs/axios';
import { firstValueFrom } from 'rxjs';

// –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á
const INTERVALS = {
  daily: 24 * 60 * 60 * 1000, // 1 –¥–µ–Ω—å
  hourly: 60 * 10 * 1000, // 10 –º–∏–Ω—É—Ç
};

@Injectable()
export class FrequencyTestService implements OnModuleInit, OnModuleDestroy {
  private prisma = new PrismaClient();
  private readonly logger = new Logger(FrequencyTestService.name);

  constructor(private readonly httpService: HttpService) {}

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
  async onModuleInit() {
    this.startTasks();
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á
  onModuleDestroy() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤—Ç–∞—å—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
  private startTasks() {
    // this.runTaskWithInterval('updateWhoisData', INTERVALS.daily);
    // this.runTaskWithInterval('updateSSLabsData', INTERVALS.daily);
    this.runTaskWithInterval('updatePagesData', INTERVALS.hourly);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
  private async runTaskWithInterval(taskName: string, interval: number) {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
      switch (taskName) {
        // case 'updateWhoisData':
        //   await this.updateWhoisData();
        //   break;
        // case 'updateSSLabsData':
        //   await this.updateSSLabsData();
        //   break;
        case 'updatePagesData':
          await this.updatePagesData();
          break;
        default:
          this.logger.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: ${taskName}`);
          return;
      }

      // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
      this.logger.log(`******** –ó–∞–¥–∞—á–∞ ${taskName} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫...`);
      setTimeout(() => this.runTaskWithInterval(taskName, interval), interval); // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    } catch (error) {
      this.logger.error(`******** –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${taskName}: ${error.message}`);
    }
  }

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –≤–º–µ—Å—Ç–µ —Å –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
async getAllDomain() {
    try {
      const domainInfo = await this.prisma.app.findMany({
        select: {
          idApp: true,          // id –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          parentDomain: true,   // id –¥–æ–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ domain
          domain: {
            select: {
              name: true,       // –∏–º—è –¥–æ–º–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã domain
            },
          },
        },
      });
  
      console.log(`–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–æ–º–µ–Ω—ã –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${domainInfo.map(d => `${d.idApp} -> ${d.domain?.name ?? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`).join(', ')}`);
      
      return { domainInfo };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–æ–≤:', error);
      throw error;
    }
  }
  

// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê WHOIS
public async updateWhoisData(): Promise<void> {
  const domain = await this.getAllDomain(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã

  for (const domainData of domain.domainInfo) {
    this.logger.log(`üîç –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ WHOIS –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domainData.domain.name}`);
    try {
      const updateResultWhois = await firstValueFrom(
        this.httpService.get(`http://localhost:3000/whois?domain=${domainData.domain.name}`)
      );
      this.logger.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ WHOIS –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domainData.domain.name}: ${JSON.stringify(updateResultWhois.data)}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ WHOIS –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domainData.domain.name}`, error);
    }
  }
}

// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê SSL
public async updateSSLabsData(): Promise<void> {
  const domain = await this.getAllDomain(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã

  for (const domainData of domain.domainInfo) {
    this.logger.log(`üîç –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domainData.domain.name}`);
    try {
      await firstValueFrom(
        this.httpService.get(`http://localhost:3000/ssl-labs/analyze/${domainData.domain.name}`)
      );
      this.logger.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SSL –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domainData.domain.name}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ SSL –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domainData.domain.name}`, error);
    }
  }
}

// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–ê–ù–ò–¶
public async updatePagesData(): Promise<void> {
  const domain = await this.getAllDomain(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã

  for (const domainData of domain.domainInfo) {
    this.logger.log(`üîç –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domainData.domain.name}`);

    try {
      // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
      const updateResultPages = await firstValueFrom(
        this.httpService.get(`http://localhost:3000/pages/${domainData.domain.name}/${domainData.idApp}`)
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ Puppeteer —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
      if (updateResultPages.data?.status === 'in_progress') {
        this.logger.warn(`‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domainData.domain.name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
      } else {
        this.logger.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domainData.domain.name}: ${JSON.stringify(updateResultPages.data)}`);
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –¥–ª—è –¥–æ–º–µ–Ω–∞: ${domainData.domain.name}`, error);
    }
  }
}

}
