// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

model company {
  idCompany Int @id @default(autoincrement())
  name String @db.VarChar(50)

  servers server[] // Связь с таблицей server один ко многим
}

model server {
  idServer Int @id @default(autoincrement())
  parentCompany Int
  ipAddress String @db.VarChar(50)
  hostname String @db.VarChar(50)
  location String @db.VarChar(50)
  os String @db.VarChar(50)
  created DateTime @default(now())
  updated DateTime @updatedAt

  app app[]
  checkServerStats checkServerStats[]
  serverHasDomain serverHasDomain[]
  serverHasSSL serverHasSSL[]

  company company @relation(fields: [parentCompany], references: [idCompany]) // Связь с таблицей company один ко многим
}

model app {
  idApp Int @id @default(autoincrement())
  parentServer Int
  parentDomain Int
  name String @db.VarChar(50)

  checkPage checkPage[]

  server server @relation(fields: [parentServer], references: [idServer]) // Связь с таблицей server один ко многим
  domain domain? @relation(fields: [parentDomain], references: [idDomain]) // Связь с таблицей domain один ко многим
}

model domain {
  idDomain Int @id @default(autoincrement())
  name String @db.VarChar(50) @unique
  registered DateTime?
  expires DateTime?
  updated DateTime?
  parentStatus Int?
  nameRegistar String? @db.VarChar(50)
  nameOwner String? @db.VarChar(50)
  access Boolean?

  app app[]
  serverHasDomain serverHasDomain[]

  status status? @relation(fields: [parentStatus], references: [idStatus]) // Связь с таблицей status один ко многим
}

model SSL {
  idSSL Int @id @default(autoincrement())
  serialNumber String @db.VarChar(50)
  namePublisher String @db.VarChar(50)
  registered DateTime
  expires DateTime
  parentStatus Int?
  fingerprint String @db.VarChar(50)
  publickey String @db.VarChar(50)
  privatekey String @db.VarChar(50)
  version String @db.VarChar(50)
  protocol String @db.VarChar(50)

  serverHasSSL serverHasSSL[]

  status status? @relation(fields: [parentStatus], references: [idStatus]) // Связь с таблицей status один ко многим
}

model status {
  idStatus Int @id @default(autoincrement())
  status String @db.VarChar(50)

  domain domain[]
  ssl SSL[]
}

model serverHasDomain { // Связь многие ко многим таблиц server и domain
  manyServer Int
  server server @relation(fields: [manyServer], references: [idServer])
  manyDomain Int
  domain domain @relation(fields: [manyDomain], references: [idDomain])

  @@id([manyServer, manyDomain])
}

model serverHasSSL { // Связь многие ко многим таблиц server и SSL
  manyServer Int
  server server @relation(fields: [manyServer], references: [idServer])
  manySSL Int
  ssl SSL @relation(fields: [manySSL], references: [idSSL])

  @@id([manyServer, manySSL])
}

model checkServerStats {
  idCheckServerStats Int @id @default(autoincrement())
  parentServer Int?

  modelCPU String
  loadCPU Float
  totalRAM BigInt
  usedRAM BigInt
  remainingRAM BigInt
  
  iface String
  ip4 String
  ip6 String
  received BigInt
  sent BigInt
  speed Float

  countProcesses Int?
  countErrors Int?
  date DateTime

  server server? @relation(fields: [parentServer], references: [idServer]) // Связь с таблицей server один ко многим
  disk disk[]
}

model disk {
  idDisk Int @id @default(autoincrement())
  parentServerStats Int
  device String?
  mount String
  type String
  totalMemory BigInt
  usedMemory BigInt
  remainingMemory BigInt
  loadMemory Float

  checkServerStats checkServerStats @relation(fields: [parentServerStats], references: [idCheckServerStats], onDelete: Cascade) // Связь с таблицей checkServerStats один ко многим
}

model checkPage {
  idCheckPage Int @id @default(autoincrement())
  parentApp Int
  statusLoadPage  String @db.VarChar(50)
  statusLoadContent  String @db.VarChar(50)
  statusLoadDOM  String @db.VarChar(50)
  statusLoadMedia  String @db.VarChar(50)
  statusLoadStyles  String @db.VarChar(50)
  statusLoadScripts  String @db.VarChar(50)
  requestTime Float
  responseTime Float
  responseRate Float

  date DateTime

  app app @relation(fields: [parentApp], references: [idApp]) // Связь с таблицей app один ко многим
}